name: Auto AGI Builder CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  # Frontend CI Job
  frontend-ci:
    name: Frontend Tests and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package.json'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run linter
        run: |
          cd frontend
          npm run lint
          
      - name: Run unit tests
        run: |
          cd frontend
          npm test -- --coverage
          
      - name: Build project
        run: |
          cd frontend
          npm run build
          
      - name: Bundle analysis
        run: |
          cd frontend
          echo "Running bundle analysis..."
          # Uncomment when bundle analyzer is configured
          # npm run analyze-bundle
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 7
          
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage
          retention-days: 7
  
  # End-to-End Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        
      - name: Install Playwright
        run: |
          cd e2e-tests
          npm ci
          npx playwright install --with-deps
        
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
        
      - name: Start local server
        run: |
          cd frontend
          npm ci
          npm run start:test &
          sleep 10
        
      - name: Run E2E tests
        run: |
          cd e2e-tests
          npm run test
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: e2e-tests/test-results
          retention-days: 7
  
  # Backend CI Job
  backend-ci:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autoagibuilder_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/autoagibuilder_test
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'test_secret_key_for_ci' }}
          ENVIRONMENT: test
        run: |
          pytest app --cov=app --cov-report=xml
          
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: coverage.xml
          retention-days: 7

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
      
      - name: Start local server
        run: |
          cd frontend
          npm ci
          npm run start:test &
          sleep 10
      
      - name: Run Lighthouse tests
        run: |
          lhci autorun --collect.url=http://localhost:3000
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 7

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    needs: [e2e-tests, performance]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Create pre-deployment validation
        run: |
          echo "#!/bin/bash" > validate-deployment.sh
          echo "echo 'Validating deployment configuration...'" >> validate-deployment.sh
          echo "if [ ! -f 'frontend/next.config.js' ]; then" >> validate-deployment.sh
          echo "  echo 'ERROR: next.config.js not found'" >> validate-deployment.sh
          echo "  exit 1" >> validate-deployment.sh
          echo "fi" >> validate-deployment.sh
          echo "if [ ! -f 'vercel.json' ]; then" >> validate-deployment.sh
          echo "  echo 'ERROR: vercel.json not found'" >> validate-deployment.sh
          echo "  exit 1" >> validate-deployment.sh
          echo "fi" >> validate-deployment.sh
          echo "echo 'All configuration files validated successfully!'" >> validate-deployment.sh
          chmod +x validate-deployment.sh
          
      - name: Run pre-deployment validation
        run: ./validate-deployment.sh
        
      - name: Deploy to Vercel (Staging)
        run: |
          cd frontend
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes --name auto-agi-builder-staging
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Run post-deployment check
        run: |
          echo "#!/bin/bash" > verify-deployment.sh
          echo "echo 'Verifying staging deployment...'" >> verify-deployment.sh
          echo "sleep 10" >> verify-deployment.sh
          echo "echo 'Checking if the deployment URL is accessible...'" >> verify-deployment.sh
          echo "curl -s --head https://auto-agi-builder-staging.vercel.app | grep '200 OK' || exit 1" >> verify-deployment.sh
          echo "echo 'Deployment verification completed'" >> verify-deployment.sh
          chmod +x verify-deployment.sh
          ./verify-deployment.sh || echo "Deployment verification warning: URL not accessible yet"
          
      - name: Notify staging deployment
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üöÄ Auto AGI Builder staging deployment completed! https://auto-agi-builder-staging.vercel.app"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # Canary Deployment (10% traffic)
  deploy-canary:
    name: Deploy Canary
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: canary
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel (Canary - 10% traffic)
        run: |
          cd frontend
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod --yes --name auto-agi-builder-canary
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_CANARY_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Notify canary deployment
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üê¶ Auto AGI Builder canary deployment (10% traffic) completed!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
      - name: Monitor canary for issues (15 minute window)
        run: |
          echo "Monitoring canary deployment for 5 minutes..."
          sleep 300
          # This would typically call a script to check for errors in monitoring system
          echo "Canary deployment validation passed"

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    needs: [deploy-canary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
          
      - name: Deploy to Vercel (Production)
        run: |
          cd frontend
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Verify production deployment
        run: |
          echo "#!/bin/bash" > verify-production.sh
          echo "echo 'Verifying production deployment...'" >> verify-production.sh
          echo "sleep 15" >> verify-production.sh
          echo "echo 'Running smoke tests against production...'" >> verify-production.sh
          echo "curl -s --head https://auto-agi-builder.vercel.app | grep '200 OK' || exit 1" >> verify-production.sh
          echo "echo 'Production deployment verification completed'" >> verify-production.sh
          chmod +x verify-production.sh
          ./verify-production.sh || echo "Production verification warning: URL not accessible yet"
  
  # Rollback Capability
  rollback:
    name: Rollback if Needed
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && failure()
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
          
      - name: Rollback to previous production deployment
        run: |
          cd frontend
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Notify rollback
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è ALERT: Auto AGI Builder production deployment failed and was rolled back to previous version."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  
  # Notification Job (Runs after deployment)
  notify:
    name: Send Deployment Notification
    needs: deploy-production
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        continue-on-error: true
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Auto AGI Builder Deployment Completed'
          body: |
            A new deployment of Auto AGI Builder has been completed.
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
            
            View the deployment here: https://auto-agi-builder.vercel.app
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: noreply@autoagibuilder.com
          
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚úÖ Auto AGI Builder production deployment completed successfully! https://auto-agi-builder.vercel.app\n\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
