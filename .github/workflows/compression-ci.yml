name: Context Compression CI

on:
  push:
    branches: [ main ]
    paths:
      - 'middle-out-compress.js'
      - 'compress-auto-agi.js'
      - 'compression-config.js'
      - 'deployment-compress.js'
      - '.github/workflows/compression-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'middle-out-compress.js'
      - 'compress-auto-agi.js'
      - 'compression-config.js'
      - 'deployment-compress.js'
      - '.github/workflows/compression-ci.yml'

jobs:
  test_compression:
    name: Test Compression Tools
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci || npm install
      
    - name: Create test directory
      run: mkdir -p test-files

    - name: Generate test file
      run: |
        node -e "
          const fs = require('fs');
          let content = '';
          // Create a large JavaScript file with repeating patterns
          content += '// Header comments and imports\n';
          content += 'import React from \"react\";\n';
          content += 'import { useState, useEffect, useContext } from \"react\";\n';
          content += 'import axios from \"axios\";\n\n';
          
          // Add many similar functions
          for (let i = 1; i <= 200; i++) {
            content += `// Function ${i}\n`;
            content += `function processData${i}(data) {\n`;
            content += '  // Process the data\n';
            content += '  const result = {};\n';
            content += '  for (const key in data) {\n';
            content += '    if (data.hasOwnProperty(key)) {\n';
            content += '      result[key] = data[key].toString().toUpperCase();\n';
            content += '      // Add more processing logic\n';
            content += '      if (result[key].length > 10) {\n';
            content += '        result[key] = result[key].substring(0, 10) + \"...\";\n';
            content += '      }\n';
            content += '    }\n';
            content += '  }\n';
            content += '  return result;\n';
            content += '}\n\n';
          }
          
          // Add a React component
          content += '// Main component\n';
          content += 'function DataProcessor() {\n';
          content += '  const [data, setData] = useState({});\n';
          content += '  const [loading, setLoading] = useState(false);\n';
          content += '  const [error, setError] = useState(null);\n\n';
          
          content += '  useEffect(() => {\n';
          content += '    setLoading(true);\n';
          content += '    axios.get(\"/api/data\")\n';
          content += '      .then(response => {\n';
          content += '        setData(response.data);\n';
          content += '        setLoading(false);\n';
          content += '      })\n';
          content += '      .catch(err => {\n';
          content += '        setError(err);\n';
          content += '        setLoading(false);\n';
          content += '      });\n';
          content += '  }, []);\n\n';
          
          content += '  return (\n';
          content += '    <div className=\"data-processor\">\n';
          content += '      {loading ? (\n';
          content += '        <div>Loading...</div>\n';
          content += '      ) : error ? (\n';
          content += '        <div>Error: {error.message}</div>\n';
          content += '      ) : (\n';
          content += '        <div>\n';
          content += '          <h2>Data Processor</h2>\n';
          content += '          <pre>{JSON.stringify(processData1(data), null, 2)}</pre>\n';
          content += '        </div>\n';
          content += '      )}\n';
          content += '    </div>\n';
          content += '  );\n';
          content += '}\n\n';
          
          content += 'export default DataProcessor;\n';
          
          fs.writeFileSync('test-files/large-test-file.js', content);
          console.log('Test file created with size: ' + (content.length / 1024).toFixed(2) + ' KB');
        "

    - name: Test middle-out compression
      run: |
        node middle-out-compress.js --file="test-files/large-test-file.js" --output="test-files/compressed-test-file.js" --level=medium
        echo "Original size: $(wc -c < test-files/large-test-file.js) bytes"
        echo "Compressed size: $(wc -c < test-files/compressed-test-file.js) bytes"
        # Check compression ratio - should be at least 30% smaller
        original_size=$(wc -c < test-files/large-test-file.js)
        compressed_size=$(wc -c < test-files/compressed-test-file.js)
        compression_ratio=$(awk "BEGIN {print (1 - $compressed_size/$original_size) * 100}")
        echo "Compression ratio: ${compression_ratio}%"
        echo "script: [[ $compression_ratio > 30 ]]"
        [[ $(awk "BEGIN {print ($compression_ratio > 30) ? \"true\" : \"false\"}") == "true" ]] || exit 1
      
    - name: Test environment-specific compression
      run: |
        # Test development environment
        export NODE_ENV=development
        node deployment-compress.js
        echo "Development environment compression complete"
        
        # Test production environment
        export NODE_ENV=production
        node deployment-compress.js
        echo "Production environment compression complete"
        
        # Check compressed files exist
        ls -la ./compressed-deploy/
        [[ -f ./compressed-deploy/large-test-file.js ]] || exit 1
    
    - name: Verify compressed file validity
      run: |
        # Check that the compressed file is valid JavaScript
        node --check test-files/compressed-test-file.js
        
        # Check that compressed file contains essential parts
        grep "import React" test-files/compressed-test-file.js
        grep "export default DataProcessor" test-files/compressed-test-file.js

  deploy_preview:
    name: Deploy Preview
    needs: test_compression
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci || npm install
      
    - name: Run context compression
      run: |
        export NODE_ENV=staging
        node deployment-compress.js
      
    - name: Deploy to Vercel (Preview)
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        zeit-token: ${{ secrets.VERCEL_TOKEN }} # Legacy name, kept for compatibility
        working-directory: ./
        
  deploy_production:
    name: Deploy Production
    needs: test_compression
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci || npm install
      
    - name: Run context compression
      run: |
        export NODE_ENV=production
        node deployment-compress.js
      
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        zeit-token: ${{ secrets.VERCEL_TOKEN }} # Legacy name, kept for compatibility
        working-directory: ./
        vercel-args: '--prod'
