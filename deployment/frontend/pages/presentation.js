import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { withProtection } from '../components/auth/ProtectedRoute';
import Layout from '../components/layout/Layout';
import PresentationMode from '../components/presentation/PresentationMode';
import { useProject } from '../contexts/ProjectContext';
import { useAPI } from '../lib/api';

/**
 * Presentation Page
 * 
 * Creates professional presentations for client meetings
 * Converts project data into slides for stakeholder presentations
 */
const PresentationPage = () => {
  const router = useRouter();
  const { id: projectId, mode } = router.query;
  const { projects, currentProject, getProject } = useProject();
  const api = useAPI();
  
  const [project, setProject] = useState(null);
  const [slides, setSlides] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPresentationMode, setIsPresentationMode] = useState(false);
  const [generationError, setGenerationError] = useState(null);
  const [presentationOptions, setPresentationOptions] = useState({
    theme: 'default',
    includeRequirements: true,
    includeTimeline: true,
    includeROI: true,
    includePrototype: true,
    includeSpeakerNotes: true
  });
  
  // Get project data
  useEffect(() => {
    async function fetchProjectData() {
      // If project ID provided, load that project
      if (projectId) {
        try {
          // In a real app, this would fetch from API
          // const response = await api.get(`/api/v1/projects/${projectId}`);
          // const projectData = response.data;
          
          // For now, use data from context
          const projectData = await getProject(projectId) || projects.find(p => p.id === projectId);
          setProject(projectData || currentProject);
        } catch (error) {
          console.error('Error fetching project data:', error);
          setProject(currentProject);
        }
      } else {
        setProject(currentProject);
      }
    }
    
    fetchProjectData();
  }, [projectId, currentProject, projects, getProject, api]);
  
  // Check if should automatically enter presentation mode
  useEffect(() => {
    if (mode === 'present' && slides.length > 0) {
      setIsPresentationMode(true);
    }
  }, [mode, slides]);
  
  // Generate presentation slides from project data
  const generateSlides = async () => {
    setIsGenerating(true);
    setGenerationError(null);
    
    try {
      // In a real implementation, you might call an API to generate slides
      // const response = await api.post('/api/v1/presentations/generate', {
      //   projectId: project.id,
      //   options: presentationOptions
      // });
      // const generatedSlides = response.data.slides;
      
      // For the demonstration, we'll create example slides based on the options
      const exampleSlides = generateExampleSlides(project, presentationOptions);
      
      // Short delay to simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setSlides(exampleSlides);
      
      // Auto-enter presentation mode if mode=present query param is set
      if (mode === 'present') {
        setIsPresentationMode(true);
      }
    } catch (error) {
      console.error('Error generating slides:', error);
      setGenerationError('Failed to generate presentation slides. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };
  
  // Generate example slides based on project data and options
  const generateExampleSlides = (project, options) => {
    if (!project) return [];
    
    const slides = [];
    
    // Title slide
    slides.push({
      type: 'title',
      title: project.name || 'Project Presentation',
      subtitle: 'Auto-Generated by Auto AGI Builder',
      details: `Presented on ${new Date().toLocaleDateString()}`,
      notes: 'Welcome everyone to today\'s presentation. We\'ll be discussing the details and progress of our project.'
    });
    
    // Project overview slide
    slides.push({
      type: 'bullets',
      title: 'Project Overview',
      bullets: [
        `Client: ${project.client || 'Internal Project'}`,
        `Start Date: ${project.startDate ? new Date(project.startDate).toLocaleDateString() : 'TBD'}`,
        `Status: ${project.status || 'In Progress'}`,
        `Team Size: ${project.teamSize || '5'} members`,
        `Completion: ${project.progress || '45'}%`
      ],
      notes: 'This slide gives a high-level overview of the project, including key dates and current status.'
    });
    
    // Requirements slides (if enabled)
    if (options.includeRequirements && project.requirements) {
      slides.push({
        type: 'bullets',
        title: 'Key Requirements',
        bullets: Array.isArray(project.requirements) 
          ? project.requirements.slice(0, 5).map(req => req.title || req.name || req.description)
          : [
              'Secure user authentication and authorization',
              'Responsive design for all device types',
              'Real-time data synchronization',
              'Comprehensive analytics dashboard',
              'Integration with existing systems'
            ],
        notes: 'These are the core requirements that have been identified through our analysis and client meetings.'
      });
    }
    
    // Timeline slide (if enabled)
    if (options.includeTimeline) {
      slides.push({
        type: 'image',
        title: 'Project Timeline',
        imageUrl: 'https://via.placeholder.com/800x400?text=Project+Timeline+Chart',
        caption: 'Estimated timeline with key milestones',
        notes: 'This timeline shows our projected schedule. We\'re currently on track to meet all major milestones.'
      });
    }
    
    // ROI slide (if enabled)
    if (options.includeROI) {
      slides.push({
        type: 'split',
        title: 'Return on Investment',
        content: (
          <div className="space-y-4">
            <p className="text-xl">Projected ROI: <span className="font-bold text-green-600">215%</span></p>
            <p className="text-xl">Payback Period: <span className="font-bold">14 months</span></p>
            <p className="text-xl">5-Year Net Benefit: <span className="font-bold text-green-600">$1.2M</span></p>
          </div>
        ),
        media: (
          <img 
            src="https://via.placeholder.com/400x300?text=ROI+Chart" 
            alt="ROI Analysis" 
            className="rounded-lg shadow-lg"
          />
        ),
        notes: 'Our ROI analysis shows strong financial benefits with a relatively short payback period.'
      });
    }
    
    // Prototype slide (if enabled)
    if (options.includePrototype) {
      slides.push({
        type: 'image',
        title: 'Interactive Prototype',
        imageUrl: 'https://via.placeholder.com/800x500?text=Application+Prototype',
        caption: 'Current prototype (click to interact in demo)',
        notes: 'This is the current state of our prototype. Key features are already functional, including user authentication and the main dashboard.'
      });
    }
    
    // Quote from client or stakeholder
    slides.push({
      type: 'quote',
      quote: 'The Auto AGI Builder has transformed how we approach software development, saving us countless hours and significantly improving our output quality.',
      attribution: 'John Smith, CTO',
      notes: 'This quote from our client emphasizes the value they\'ve found in our approach and solution.'
    });
    
    // Next steps
    slides.push({
      type: 'bullets',
      title: 'Next Steps',
      bullets: [
        'Complete remaining user interface components',
        'Finalize API integration with third-party services',
        'Conduct comprehensive user acceptance testing',
        'Prepare deployment documentation',
        'Schedule training sessions for end users'
      ],
      notes: 'These are our immediate next steps to keep the project moving forward successfully.'
    });
    
    // Closing slide
    slides.push({
      type: 'title',
      title: 'Thank You',
      subtitle: 'Questions & Discussion',
      details: 'Contact: team@autoagibuilder.com',
      notes: 'Thank everyone for their time and open the floor for questions.'
    });
    
    return slides;
  };
  
  // Handle option changes
  const handleOptionChange = (option) => {
    setPresentationOptions(prev => ({
      ...prev,
      [option]: !prev[option]
    }));
  };
  
  // Handle theme change
  const handleThemeChange = (theme) => {
    setPresentationOptions(prev => ({
      ...prev,
      theme
    }));
  };
  
  // Enter presentation mode
  const enterPresentationMode = () => {
    setIsPresentationMode(true);
  };
  
  // Exit presentation mode
  const exitPresentationMode = () => {
    setIsPresentationMode(false);
  };
  
  // If we're in presentation mode, render the PresentationMode component
  if (isPresentationMode) {
    return (
      <PresentationMode
        slides={slides}
        projectData={project}
        theme={presentationOptions.theme}
        onExit={exitPresentationMode}
      />
    );
  }
  
  return (
    <Layout title="Presentation">
      <div className="py-6">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center mb-8">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Project Presentation</h1>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Create client-ready presentations from your project data
              </p>
            </div>
            {slides.length > 0 && (
              <button
                onClick={enterPresentationMode}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Start Presentation
              </button>
            )}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Left Column - Configuration */}
            <div className="md:col-span-1 space-y-6">
              {/* Project Selection */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Project</h2>
                <div>
                  <label htmlFor="project" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Select Project
                  </label>
                  <select
                    id="project"
                    value={project?.id || ''}
                    onChange={(e) => {
                      const selectedProject = projects.find(p => p.id === e.target.value);
                      setProject(selectedProject);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  >
                    <option value="" disabled>Select a project</option>
                    {projects.map(p => (
                      <option key={p.id} value={p.id}>{p.name}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              {/* Presentation Options */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h2 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Presentation Options</h2>
                
                {/* Theme Selection */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Theme
                  </label>
                  <div className="grid grid-cols-2 gap-3">
                    {['default', 'corporate', 'minimal', 'vibrant'].map(theme => (
                      <button
                        key={theme}
                        onClick={() => handleThemeChange(theme)}
                        className={`px-3 py-2 text-sm font-medium rounded-md capitalize ${
                          presentationOptions.theme === theme
                            ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 border border-blue-200 dark:border-blue-800'
                            : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
                        }`}
                      >
                        {theme}
                      </button>
                    ))}
                  </div>
                </div>
                
                {/* Content Options */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Content to Include
                  </label>
                  <div className="space-y-2">
                    {[
                      { id: 'includeRequirements', label: 'Requirements' },
                      { id: 'includeTimeline', label: 'Timeline' },
                      { id: 'includeROI', label: 'ROI Analysis' },
                      { id: 'includePrototype', label: 'Prototype Screenshots' },
                      { id: 'includeSpeakerNotes', label: 'Speaker Notes' }
                    ].map(option => (
                      <div key={option.id} className="flex items-center">
                        <input
                          id={option.id}
                          type="checkbox"
                          checked={presentationOptions[option.id]}
                          onChange={() => handleOptionChange(option.id)}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded"
                        />
                        <label htmlFor={option.id} className="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                          {option.label}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Generate Button */}
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <button
                  onClick={generateSlides}
                  disabled={isGenerating || !project}
                  className={`w-full px-4 py-2 rounded-md text-white font-medium ${
                    isGenerating || !project
                      ? 'bg-gray-400 dark:bg-gray-600 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                  }`}
                >
                  {isGenerating ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating...
                    </span>
                  ) : (
                    'Generate Presentation'
                  )}
                </button>
                
                {generationError && (
                  <p className="mt-2 text-sm text-red-600 dark:text-red-400">
                    {generationError}
                  </p>
                )}
              </div>
            </div>
            
            {/* Right Column - Preview */}
            <div className="md:col-span-2">
              {slides.length > 0 ? (
                <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                  <h2 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Presentation Preview</h2>
                  
                  {/* Slide Count */}
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    {slides.length} slides generated
                  </p>
                  
                  {/* Slide Thumbnails */}
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {slides.map((slide, index) => (
                      <div 
                        key={index}
                        className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-md transition-shadow"
                      >
                        <div className={`h-24 flex items-center justify-center text-center p-2 ${
                          presentationOptions.theme === 'corporate' ? 'bg-blue-900 text-white' :
                          presentationOptions.theme === 'vibrant' ? 'bg-gradient-to-br from-purple-800 to-indigo-900 text-white' :
                          presentationOptions.theme === 'minimal' ? 'bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100' :
                          'bg-white dark:bg-gray-900 text-gray-900 dark:text-white'
                        }`}>
                          <p className="text-xs truncate font-medium">
                            {slide.title || (slide.type === 'quote' ? 'Quote' : `Slide ${index + 1}`)}
                          </p>
                        </div>
                        <div className="p-2 bg-gray-50 dark:bg-gray-800 text-xs text-gray-500 dark:text-gray-400">
                          {slide.type === 'title' ? 'Title Slide' :
                           slide.type === 'bullets' ? 'Bullet Points' :
                           slide.type === 'image' ? 'Image Slide' :
                           slide.type === 'chart' ? 'Chart Slide' :
                           slide.type === 'split' ? 'Split Content' :
                           slide.type === 'quote' ? 'Quote' : 'Custom Slide'}
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {/* Call to Action */}
                  <div className="mt-6 text-center">
                    <button
                      onClick={enterPresentationMode}
                      className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Start Presentation
                    </button>
                    <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                      Press F for fullscreen mode, arrow keys to navigate
                    </p>
                  </div>
                </div>
              ) : (
                <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 flex flex-col items-center justify-center h-full">
                  <img
                    src="https://via.placeholder.com/150?text=Presentation"
                    alt="Presentation"
                    className="w-24 h-24 mb-4"
                  />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No Slides Generated Yet</h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 text-center max-w-md mb-6">
                    Configure your presentation options and click "Generate Presentation" to create slides based on your project data.
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 text-center max-w-md">
                    Presentations include project overview, requirements, timeline, ROI analysis, and more based on your selected options.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default withProtection(PresentationPage);
